@using InspiredCooking.Core

<div class="container">
    <!-- Steps Title-->
    <div class="row">
        <div class="col-12">
            <p>Steps</p>
        </div>
    </div>
    <!-- Steps Fields-->
    <div class="form-row">
        <label asp-for="Recipe.Steps"></label>
        <span class="text-danger" asp-validation-for="Recipe.Steps"></span>
        @for (var i = 0; i < Steps.Count; i++)
        {
            var step = Steps[i];
            <input type="hidden" name="Recipe.Steps[@i].Id" value="@step.Id">
            <!--Title-->
            <div class="form-group col-6">
                <input class="form-control" type="text" placeholder="Step Title" name="Recipe.Steps[@i].Title" value="@step.Title">
            </div>
            <!-- Delete Step-->
            <div class="form-group col-1">
                <button class="btn" @onclick="() => DeleteStepField(step)" @onclick:preventDefault="true"><i class="bi-x-circle" style="color: forestgreen"></i></button>
            </div>
            <!--Content-->
            <div class="form-group col-12">
                <input class="form-control" type="text" placeholder="Step Content" name="Recipe.Steps[@i].Content" value="@step.Content">
            </div>
        }
    </div>
</div>
<!--Add new Step-->
<div class="row col-12">
    <button class="btn btn-minor" @onclick="AddStepField" @onclick:preventDefault="true">Add Step</button>
</div>


@code {
    [Parameter]
    public List<Step> Steps { get; set; }

    private void AddStepField()
    {
        var newStep = new Step();
        Steps.Add(newStep);

    }

    private void DeleteStepField(Step step)
    {
        Steps.Remove(step);
    }

    protected override void OnParametersSet()
    {

    }
}
